


					APUNTES DE GIT



Configuración global de git:

1. Cambiar el nombre de usuario global
git config --global user.name "Tu Nuevo Nombre de Usuario"    

2. Cambiar el correo electrónico global
git config --global user.email "tunuevoemail@ejemplo.com"    

3. Cambiar el nombre de la rama principal por defecto
git config --global init.defaultBranch main    

4. Para que Git confíe automáticamente en todos los repositorios dentro de tu carpeta de usuario en Windows
git config --global --add safe.directory "%USERPROFILE%"

5. Para que Git confíe automáticamente en un repositorio de un directorio específico
git config --global --add safe.directory "C:/Users/isidro.carbajo/apuntes-git"

6. Crear alias para ejecutar comandos
git config --global alias.<alias> '<comando>'

-----
Si quieres verificar que los cambios se han aplicado correctamente, puedes usar:
git config --global --list    

Inicializar un repositorio:
git init

Añadir los archivos al área de preparación de git:
git add "Apuntes git.txt"
git add .

Hacer una instantania de lo que se ha añadido al área de preparación de git:
git commit -m "Este es mi primer commit"

Añadir todos los archivos al área de preparación y Hacer una instantania de lo que se ha añadido al área de preparación de git:
git commit -am "Tu mensaje de commit"

Verificar la existencia del remoto:
git remote -v

Listar las ramas del remoto:
git ls-remote --heads origin
git branch -r

Cambiarse a la rama:
git switch nombre-de-la-rama
git checkout nombre-de-la-rama

Crea una nueva rama y se cambia a ella:
git switch -c nombre-de-la-rama
git checkout -b nombre-de-la-rama

Ver el estado del área de preparación y trabajo de Git:
git status    

Ver el historial:
git log
Parámetros:
- --oneline: Muestra cada commit en una sola línea (hash corto + mensaje).
- --graph: Dibuja un gráfico ASCII del historial de ramas.
- --decorate: Muestra nombres de ramas y etiquetas junto a los commits.
- --name-only: Lista solo los nombres de archivos modificados.
- --grep="texto": Filtra commits cuyo mensaje contiene cierto texto.

Ver todas las referencias del historial:
git reflog

Elimina el archivo del área de preparación:
git reset archivo.txt

Elimina todos los archivos del área de preparación:
git reset

Restaura el archivo del último commit al área de trabajo:
git restore archivo.txt
git checkout -- archivo.txt

Restaura todos los archivos al área de trabajo y elimina los archivos del área de preparación:
git reset --hard

Muestra los cambios no confirmados (unstaged) en el directorio de trabajo.
git diff

Muestra las diferencias entre el área de trabajo y el último commit:
git diff HEAD

Ver diferencias con formato resumido:
git diff --stat

Ver diferencias de un archivo:
git diff HEAD -- ruta/del/archivo.txt

Muestra los cambios que han sido añadidos al área de preparación (staged) pero aún no confirmados.
git diff --staged

Muestra las diferencias entre dos commits.
git diff <commit1> <commit2>  

Compara dos ramas.
git diff <branch1> <branch2>  

Muestra los cambios en un archivo específico en un commit.
git diff <commit> <file>  

Opciones:
Muestra solo los nombres de los archivos modificados.
--name-only  

Muestra los nombres de los archivos y el tipo de cambio (A = añadido, M = modificado, D = eliminado).
--name-status  

Muestra un resumen estadístico de los cambios (líneas añadidas/eliminadas por archivo).
--stat  

Ignora cambios en espacios en blanco.
--ignore-space-change o -b  

Ignora todos los espacios en blanco.
--ignore-all-space o -w  

Sintaxis tag:
git tag [opciones] [nombre-etiqueta] [commit]
Opciones:
-l Lista los tag
-d <nombre-del-tag> Borra el tag

Listar las ramas locales del repositorio:
git branch
Indica cual es la rama actual:
git rev-parse --abbrev-ref HEAD
Parámetros:
Muestra todas las ramas, tanto locales como remotas.
1. -a o --all
Muestra solo las ramas remotas.
2. -r o --remotes
Crea una nueva rama con el nombre especificado.
3. branch <nombre>
Elimina una rama local (solo si ya ha sido fusionada).
4. -d <nombre> o --delete <nombre>
Elimina una rama local forzadamente, aunque no haya sido fusionada.
5. -D <nombre>
Renombra la rama actual.
6. -m <nombre> o --move <nombre>
Renombra una rama específica.
7. -m <viejo> <nuevo>
Muestra las ramas que contienen un commit específico.
8. --contains <commit>
Lista las ramas que han sido completamente fusionadas con la rama actual.
9. --merged
Lista las ramas que no han sido fusionadas con la rama actual.
10. --no-merged

Funde la rama especificada con la rama actual:
git merge <rama>
Parámetros:
Fuerza una fusión con commit, incluso si se podría hacer un fast-forward.
1. --no-ff
Solo permite la fusión si puede hacerse como fast-forward. Si no es posible, falla.
2. --ff-only
Combina todos los commits de la rama en uno solo, sin crear un commit de fusión automáticamente.
3. --squash
- --commit: Hace el commit automáticamente después de la fusión (por defecto).
- --no-commit: Realiza la fusión pero no hace el commit, permitiéndote revisar o modificar antes.
4. --commit / --no-commit
Cancela una fusión en curso si hay conflictos.
5. --abort
Permite especificar una estrategia de fusión como recursive, resolve, ours, theirs, etc.
6. --strategy=<estrategia>
Incluye (o no) los mensajes de los commits fusionados en el mensaje de fusión.
7. --log / --no-log
- --edit: Abre el editor para modificar el mensaje de fusión.
- --no-edit: Usa el mensaje por defecto sin abrir el editor.
8. --edit / --no-edit

Guardar temporalmente los cambios de tu área de trabajo y poder cambiar de rama sin perderlos:
git stash
Restaurar los cambios que habías guardado.
git stash pop
Parámetros:
Guarda los cambios en una nueva entrada del stash (es el comportamiento por defecto).
1. push
Muestra todas las entradas guardadas en el stash.
2. list
Muestra los cambios del stash más reciente.
3. show
Aplica los cambios del stash más reciente sin eliminarlo del stash.
4. apply
Aplica los cambios del stash más reciente y los elimina del stash.
5. pop
Elimina una entrada específica del stash.
6. drop
Elimina todas las entradas del stash.
7. clear
Crea una nueva rama desde el stash y aplica los cambios allí.
8. branch <nombre-rama>

Comando git push.
Se utiliza para subir cambios locales a un repositorio remoto. Su sintaxis básica es:

git push [opciones] [repositorio] [rama]


Parámetros:

- origin: nombre del repositorio remoto (por defecto es origin).
- main o master u otra rama: nombre de la rama que quieres subir.

Opciones útiles

--all: sube todas las ramas al repositorio remoto.
--tags: sube todas las etiquetas (tags) al repositorio remoto.
--force o -f: fuerza el push, sobrescribiendo el historial remoto (¡útil con precaución!).
--force-with-lease: similar a --force, pero más seguro porque verifica que no haya cambios remotos inesperados.
--set-upstream o -u: establece una rama de seguimiento entre la rama local y la remota.
--dry-run: simula el push sin realizarlo realmente, útil para verificar qué se enviaría.
--delete: elimina una rama remota.
  git push origin --delete feature/rama-antigua

Comando git fetch:  
El comando git fetch se utiliza para descargar los cambios desde un repositorio remoto sin aplicarlos directamente a tu rama actual. Es útil para mantener tu repositorio local actualizado con los cambios remotos antes de hacer un merge o rebase.

git fetch [opciones] [repositorio] [refspec]

Parámetros:

- origin: nombre del repositorio remoto (por defecto).
- <nombre-de-rama>: puedes especificar una rama concreta que deseas traer.
git fetch origin main

Opciones:

--all: descarga de todos los repositorios remotos configurados.
--prune: elimina las referencias a ramas remotas que ya no existen.
--dry-run: muestra lo que se descargaría sin hacerlo realmente.
--tags: descarga todas las etiquetas del repositorio remoto.
--force: fuerza la actualización de referencias incluso si hay divergencias.


Parámetro [refspec] en el comando git fetch: 
se utiliza para definir qué referencias específicas (ramas, etiquetas, etc.) deseas traer del repositorio remoto y dónde colocarlas en tu repositorio local.

Sintaxis
<origen>:<destino>

- <origen>: la referencia en el repositorio remoto (por ejemplo, refs/heads/main)
- <destino>: la referencia en tu repositorio local (por ejemplo, refs/remotes/origin/main)

 Ejemplos prácticos

1. Traer una rama específica:
git fetch origin main

Esto es equivalente a usar el refspec:
git fetch origin refs/heads/main:refs/remotes/origin/main

2. Traer una rama remota y guardarla con otro nombre local:
git fetch origin refs/heads/main:refs/remotes/origin/otra-rama

3. Traer todas las ramas:
git fetch origin "+refs/heads/*:refs/remotes/origin/*"

El + indica que se puede sobrescribir si es necesario (como un --force).

 ¿Cuándo usar refspecs?

- Cuando quieres controlar exactamente qué ramas o etiquetas se traen.
- Cuando necesitas renombrar ramas remotas localmente.
- Cuando haces scripts o automatizaciones avanzadas con Git.

Comando git pull:
Se utiliza para actualizar tu rama local con los cambios del repositorio remoto. Es una combinación de dos comandos: git fetch seguido de git merge (o git rebase, si se configura así).

 Sintaxis:

git pull [opciones] [repositorio] [rama]

Parámetros:

- origin: nombre del repositorio remoto (por defecto).
- main, master, develop, etc.: nombre de la rama que quieres traer y fusionar.

git pull origin main

Opciones:

--rebase: en lugar de hacer un merge, aplica los cambios remotos sobre tus commits locales usando rebase.
--no-commit: evita que se cree automáticamente un commit de merge.
--no-ff: fuerza un commit de merge incluso si se puede hacer un fast-forward.
--ff-only: solo permite el fast-forward; si no es posible, aborta el pull.
--verbose: muestra más información durante el proceso.

